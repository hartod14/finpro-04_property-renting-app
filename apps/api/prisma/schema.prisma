// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TENANT
}

enum FaciltyType {
  PROPERTY
  ROOM
}

enum ValueType {
  NOMINAL
  PERCENTAGE
}

enum BookingStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  EXPIRED
  CANCELLED
  REJECTED
  DONE
}

enum PaymentMethod {
  MANUAL
  MIDTRANS
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique @db.VarChar(100)
  phone           String?   @db.VarChar(15)
  password        String?   @db.Text
  name            String?   @default("User")
  profile_picture String?   @db.Text
  is_verified     Boolean   @default(false)
  role            Role
  google_id       String?   @unique @db.Text
  facebook_id     String?   @unique @db.Text
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  deleted_at      DateTime?

  properties    Property[]
  userReviews   Review[]   @relation(name: "UserReviews")
  tenantReplies Review[]   @relation(name: "TenantReplies")
  Booking       Booking[]
  Category      Category[]

  @@map("users")
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  properties Property[]

  @@map("cities")
}

model Category {
  id         Int       @id @default(autoincrement())
  tenant_id  Int?
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  properties Property[]
  tenant     User?      @relation(fields: [tenant_id], references: [id])

  @@map("categories")
}

model Facility {
  id                  Int                   @id @default(autoincrement())
  type                FaciltyType
  name                String
  deleted_at          DateTime?
  PropertyHasFacility PropertyHasFacility[]
  RoomHasFacility     RoomHasFacility[]

  @@map("facilites")
}

model RoomImage {
  id         Int       @id @default(autoincrement())
  room_id    Int
  path       String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  room Room @relation(fields: [room_id], references: [id])

  @@map("room_images")
}

model Property {
  id            Int       @id @default(autoincrement())
  tenant_id     Int
  category_id   Int
  city_id       Int
  name          String
  slug          String?   @unique @db.Text
  description   String?   @db.Text
  address       String    @db.Text
  checkin_time  DateTime? @db.Time()
  checkout_time DateTime? @db.Time()
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  deleted_at    DateTime?

  tenant                User                  @relation(fields: [tenant_id], references: [id])
  category              Category              @relation(fields: [category_id], references: [id])
  city                  City                  @relation(fields: [city_id], references: [id])
  propertyHasFacilities PropertyHasFacility[]
  rooms                 Room[]
  peakSeasonRates       PeakSeasonRate[]
  reviews               Review[]
  propertyImages        PropertyImage[]

  @@map("properties")
}

model PropertyImage {
  id          Int       @id @default(autoincrement())
  property_id Int
  path        String    @db.Text
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?

  property Property @relation(fields: [property_id], references: [id])

  @@map("property_images")
}

model PropertyHasFacility {
  id          Int @id @default(autoincrement())
  facility_id Int
  property_id Int

  facility Facility @relation(fields: [facility_id], references: [id])
  property Property @relation(fields: [property_id], references: [id])

  @@map("property_has_facilities")
}

model Review {
  id          Int       @id @default(autoincrement())
  user_id     Int
  tenant_id   Int
  property_id Int
  rating      Int
  comment     String    @db.Text
  reply       String?   @db.Text
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?

  user     User     @relation(name: "UserReviews", fields: [user_id], references: [id])
  tenant   User     @relation(name: "TenantReplies", fields: [tenant_id], references: [id])
  property Property @relation(fields: [property_id], references: [id])

  @@map("reviews")
}

model Room {
  id          Int       @id @default(autoincrement())
  name        String
  property_id Int
  base_price  Decimal   @db.Decimal(15, 2)
  description String?   @db.Text
  capacity    Int
  size        Decimal   @db.Decimal(15, 2)
  total_room  Int
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?

  property             Property              @relation(fields: [property_id], references: [id])
  roomHasFacilities    RoomHasFacility[]
  roomUnavailableDates RoomUnavailableDate[]
  bookings             Booking[]
  RoomImage            RoomImage[]

  @@map("rooms")
}

model RoomHasFacility {
  id          Int @id @default(autoincrement())
  facility_id Int
  room_id     Int

  facility Facility @relation(fields: [facility_id], references: [id])
  room     Room     @relation(fields: [room_id], references: [id])

  @@map("room_has_facilities")
}

model RoomUnavailableDate {
  id         Int       @id @default(autoincrement())
  room_id    Int
  start_date DateTime  @db.Date
  end_date   DateTime  @db.Date
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  room Room @relation(fields: [room_id], references: [id])

  @@map("room_unavailable_dates")
}

model PeakSeasonRate {
  id          Int       @id @default(autoincrement())
  property_id Int
  value_type  ValueType
  value       Decimal   @db.Decimal(15, 2)
  start_date  DateTime  @db.Date
  end_date    DateTime  @db.Date
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?

  property Property @relation(fields: [property_id], references: [id])

  @@map("peak_season_dates")
}

model Booking {
  id            Int           @id @default(autoincrement())
  user_id       Int
  room_id       Int
  payment_id    Int           @unique
  order_number  String        @db.Text
  checkin_date  DateTime      @db.Date
  checkout_date DateTime      @db.Date
  status        BookingStatus

  user    User    @relation(fields: [user_id], references: [id])
  room    Room    @relation(fields: [room_id], references: [id])
  payment Payment @relation(fields: [payment_id], references: [id])

  @@map("bookings")
}

model Payment {
  id           Int           @id @default(autoincrement())
  amount       Decimal       @db.Decimal(15, 2)
  method       PaymentMethod
  proof        String?   
  payment_date DateTime?
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt

  booking Booking?

  @@map("payments")
}

//Additional
model Banner {
  id        Int     @id @default(autoincrement())
  image     String  @db.Text
  is_active Boolean
}
